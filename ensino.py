#vamos ver estruturas de maneiras din√¢micas de ensino a cerca das estruturas e comandos de python
#Version 1.0
import os
def limpa():
    return os.system('cls')
def entrada_saida():
    print("entradas s√£o valores que ir√£o ser atribu√≠dos a elementos chamados variaveis\nusando um comando chamado 'input'\ne para mostrar um texto como esse agora, ou um valor, podemos chamar um comando chamado 'print'")
    ex = input("digite um texto: ")
    limpa()
    print(f"texto digitado: {ex}")
    print("para realizar esta a√ß√£o anterior, usamos um input, para receber o valor texto digitado por voc√™, e usamos um print para mostrar na tela o que voc√™ escreveu.")
    ex = 'texto'
    print(f"Estruturas:\nVariavel = str(input('digite algo: '))\nprint(f,'texto digitado: {ex}')")
    print("IMPORTANTEüö®: o sinal de igual '=' em python n√£o se l√™ como igual, e sim como recebe, ele √© usado para atribuir valores as variaveis, o sinal de igual √© representa por dois iguais '=='.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print(f"maneiras de mostrar textos com valores de variaveis.\nprint(f'texto digitado: {ex}')\nprint('texto digitado: {ex}'.format(texto))\nprint('texto digitado: ',texto)")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
def variaveis():
    print("variaveis s√£o como espa√ßos vazios, que ir√£o receber algum tipo de valor(apenas um), imagime que voc√™ tem um guarda roupa, onde voc√™ tem uma gaveta que guardas s√≥ roupas intimas, voc√™ vai e guardar uma cueca preta\n√© como se voc√™ tivesse atribuido um valor a uma variavel chamada gaveta, o valor de 'cueca preta'")
    print("Ex: gaveta = 'cueca preta'\nse voc√™ quiser guardar outro tipo de roupa intima, voc√™ teria que retirar a cueca preta, pois ela s√≥ guarda um valor.")
    print("os tipos primitivos de cria√ß√£o de variaveis s√£o 4:")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("a)int(inteiros): servem para guardar n√∫meros: 1;2;3 e etc")
    print("b)float(n√∫meros flutuantes): servem para guardar n√∫meros com casas decimais ")
    print("c)str(strings): servem para guardar valores textos, qualquer coisa digitado, tem que estar entre aspas, duplas ou solo.")
    print("d)bool(booleanos): servem para receber apenas dois valores(nunca os dois ao mesmo tempo). True/False")
    c = input("digite qualquer cosia para continuar: ")
    limpa()
    print("*Atribuindo diretamente valores as variaveis:\ntexto = 'ol√° mundo'\n*√∫suario atribuindo:\ntexto = str(input('digite algo: '))")
    print("*o comando √© dividido em nome da variavel criada, tipo dela, o input para atribuir um valor e um texto dentro do input que ir√° aparecer para o auxiliar o √∫suario")
    print("√© importante especificar o tipo da variavel a depender do caso, pois se n√£o especificar, ele ir√° ler como uma string, e ao fazer calculos, ele ir√° dar erro.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("Regras de cria√ß√µes de varaiveis:\nI)elas n√£o podem come√ßar com n√∫meros\nII)n√£o podem ter simbolos ou acentua√ß√µes, exceto o '_'\nIII)n√£o podem come√ßar com n√∫meros\nIV)n√£o podem ser palavras reservas(palavras que j√° est√£o sendo usadas no sistema, como print por exemplo)")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
def testes_variaveis():
    print("existe alguns testes que podemos fazer com as variaveis. Como por exemplo:")
    print("a) var.islower(): para saber est√° em letras minusculas.")
    print("b)Var.isupper(): saber se est√° em letras mai√∫sculas.")
    print("c)Var.istitle: saber se as primeiras letras s√£o mai√∫sculas.")
    print("d)Var.isspace(): se s√≥ tem espa√ßos.")
    print("e)Var.isalpha(): se s√≥ tem letras.")
    print("f)Var.isnumeric: se s√≥ tem n√∫meros.")
    print("g)Var.isalnum: letras e n√∫meros, mas qualquer digita√ß√£o, seja de n√∫meros ou letras j√° o far√° retornar True")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
def operadores():
    print("os operadores aritmeticos em python s√£o os seguintes: \n(+) soma\n(-) subtra√ß√£o\n(*) multiplica√ß√£o\n(/) divis√£o\n(//) divis√£o inteira(ignora o decimal)\n(%) modulo(resto da divis√£o)\n(**) pot√™ncia")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("Exemplos a seguir:")
    print("Ex1: soma = X + Y\nEx2: subtracao = X - Y\nEx3: multiplicacao = X*Y\nEx4: divisao = X/Y\nEx5: divint = X//Y\nEx6: modulo = X%Y\nEx7: potencia = X**Y")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    n1 = 5
    n2 = 2
    print(f"{n1} + {n2} = {n1 + n2} ")
    print(f"{n1} - {n2} = {n1 - n2} ")
    print(f"{n1} / {n2} = {n1 / n2} ")
    print(f"{n1} * {n2} = {n1 * n2} ")
    print(f"{n1} // {n2} = {n1 // n2} ")
    print(f"{n1} % {n2} = {n1 % n2} ")
    print(f"{n1} ** {n2} = {n1 ** n2} ")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("ordem de preced√™ncia em uma equa√ß√£o: \n1¬∫ par√™nteses ()\n2¬∫ pot√™ncia\n 3¬∫ multiplica√ß√£o/divis√µes/modulos\n 4¬∫ soma/subtra√ß√£o")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
def biblioteca():
    print("existem coisas chamadas bibliotecas, que seriam como extens√ß√µes do python para ajudar nossa vida, para fazer algo, com apenas um comando, ao inv√©s de termos de criar linhas de c√≥digo para aquilo.")
    print("existem bibliotecas integradas no python, mas existem outras que podem ser baixadas e colocadas, basta ter o pip instalado no computador, abrir o prompt de comando, e digite pip install nome_do_pip")
    print("as bibliotecas podem ser importadas de duas maneiras.\nimport biblioteca ou from biblioteca import fun√ß√£o_da_biblioteca")
    c = input("digite qualquer coisa para continuar.")
    limpa()
    print("Ex1:\nimport math\nraiz_de_25 = math.sqrt(25) #sa√≠da: 5\nEx2: from math import sqrt\nraiz_de_25 = sqrt(25) ")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
def condicao():
     print("se voc√™ vai viajar de uma cidade at√© outra, existem v√°rias op√ß√µes de caminhos at√© o destino certo?\nna programa√ß√£o n√≥s podemos prever certos desvios, usando codi√ß√µes.\npor exemplo se eu tiver dinheiro eu compro uma pizza. Se n√£o, eu como um p√£o.")
     print("isso √© tamb√©m um tipo de condi√ß√£o, na programa√ß√£o temos tr√™s condi√ß√µes")
     print("if(se): if condi√ß√£o:")
     print("elif: vem depois do if, para criar outra condi√ßao.")
     print("else: vem ap√≥s todos os if presentes na estruturas, para dizer que cada tudo aquilo n√£o seja executado, outra coisa ser√°.")
     c = input("digite qualquer cosia para continuar: ")
     limpa()
     print("Exemplo:\nif nota >= 6:\n   print('aprovado')\nelif nota < 6 and nota >= 4:\n   print('recupera√ß√£o')\nelse:\n   print(reprovado)")
     c = input("\n\ndigite qualquer coisa para continuar: ")
     limpa()
def repetir():
    print("o nome estruturas de repeti√ß√µes j√° s√£o autoexplicativos, servem para repetir, enquanto uma condi√ß√£o for atendida.")
    print("imagine que sua m√£e diz que voc√™ n√£o poder√° sair enquanto n√£o arrumar seu quarto, e ela fica indo at√© seu quarto para conferir, e apenas quando o quarto estiver arrumado, voc√™ vai estar liberado.")
    print("exemplo representado em c√≥digo:")
    print("while arrumar_o_quarto != True:")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("existem dois tipos de estruturas de repeti√ß√µes: while/for")
    print("o while √© usado junto a uma condi√ß√£o para que o bloco dentro dele se repita.")
    print("j√° o for √© utilizado com base n√∫merica. Dividido em for, cria√ß√£o de uma variavel in range e valor da variavel criada, at√© quando ir√° repetir e o incremento.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("sintaxe:\na)while (condi√ß√£o):\nb)for variavel in range (valor_variavel,limite,incremento)")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("existem alguns tipos de usos do while e do for, que s√£o interessantes para se trabalhar.")
    print("exemplos de uso do while:\na)while True: serve para loop infinito, sendo quebrado apenas pelo comando break.\nb)while verifica√ß√£o: serve para verificar se o usu√°rio est√° digitando algo diferente do desejado.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("existe uma coisa que falaremos no pr√≥ximo topico, que s√£o as listas, ent√£o iremos deixar o exemplos do for para o pr√≥ximo topico, para explicarmos melhor.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
def listas():
    print("no topico 2, quando falamos de variaveis, foi dito que as variaveis guardam apenas um valor, pois sempre que atribuido um novo valor a ela, o valor anterior some.")
    print("mas se associarmos uma lista a uma variavel, ela ter√° mais espa√ßos para guardar elementos.")
    print("√© como se no exemplo da cueca preta, agora n√≥s possemos guardar mais cuecas, pois a variavel gaveta agora tem mais espa√ßos para guardar mais cuecas.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("listas s√£o representadas por: []")
    print("lista pr√©-definida: lista = [1,2,3]")
    print("listas acionaveis: lista []")
    print("criamos uma lista vazia para que seja adcionado novos elementos a ela, mas tamb√©m podemos usar uma lista pr√©-definida e adiconar elementos a ela.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("manipula√ß√µes de listas:\na)lista.append(variavel): adcionando elementos a lista.\nb)lista.pop(): exclui o √∫ltimo elemento da lista\nc)lista.remove(elemento): apaga o elemento especifico\nd)del lista: deleta toda a lista")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("Tipos de lista:\na)Tuplas: listas imutaveis quando definidas.\nb)aninhadas: listas dentro de listas, da mesma tipagem. Ex: lista = [[1,2,3],[4,5,6]]\nc)listas compostas: listas dentro de listas com elementos de diferentes tipos. Ex: lista = ['idade',[19]]\nd)Dicion√°rio: listas que definem chaves, a receber respectivos valores, como se voc√™ digitasse o nome de algu√©m, e puxasse todos os dados daquela pessoa.Ex: dict = { 'nome'(chave): 'Gabriel(valor)'")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
def funcao():
    print("fun√ß√µes s√£o como partes resumidas de um c√≥digo. Servem para ajudar na nossa vida, pois elas nos permitem repetir uma parte do c√≥digo, se necess√°rio, sem precisar digitar o processo todo de novo, basta chama-la.")
    print("Existem v√°rios tipos de fun√ß√µes, fun√ß√µes ela servem para executar todo um bloco,tanto para retornar valores.")
    print("Existem coisas chamadas par√¢metros, que quando queremos retornar um valor, n√£o o deixar apenas dentro da fun√ß√£o, precisamos os passar.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("digamos que A vale 5 e B vale 7.")
    print("ao criar uma fun√ß√£o chamada SOMAR_DOIS_NUMEROS e quando eu a chamar, passarei os respectivos valores, e ela ir√° me retornar a soma entre eles.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("Exemplo em c√≥digo:")
    print("def SOMAR_DOIS_NUMEROS(A,B):\n  T = A + B\n  return T")
    c = input("\ndigite qualquer coisa para continuar: ")
    limpa()
    print("existem dois tipos de fun√ß√µes em python, as def e as lambda")
    print("a)def nome_da_fun√ß√£o (par√¢metros(variaveis criadas para receber valores mostrados antes)):")
    print("b)variavel = lambda variavel:processo a ser feito")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("Exemplos:")
    print("def multiplicacao(X,Y):\n   Total = X*Y\n   return Total\nprint(multiplicacao(5,6)) #sa√≠da : 30")
    c = input("\ndigite qualquer coisa para continuar: ")
    limpa()
    print("multiplicacao = lambda x,y: x*y\nprint(multiplicacao(5,6))#sa√≠da : 30")
    c = input("\ndigite qualquer coisa para continuar: ")
    limpa()
def erro():
    print("em toda linguagem de programa√ß√£o existem os possiveis erros, onde se o usu√°rio digitar algo diferente do esperado a depender, o programa pode quebrar, al√©m dos erros dentro do pr√≥prio c√≥digo.")
    print("se por exemplo eu colocar para o usu√°rio digitar dois n√∫meros inteiros para soma-los, e o usu√°rio digitar por exemplo uma letra, o c√≥digo ir√° quebrar, mostrando que o usu√°rio digitou algo diferente de um n√∫mero inteiro.")
    print("em python para evitar que o c√≥digo quebre, podemos usar um Try para o programa tentar rodar, se ele n√£o conseguir, ir√° exibir outra coisa.")
    c = input("digite qualquer coisa para continuar: ")
    limpa()
    print("Exemplo:\ntry:\n   n = int(input('digite um n√∫mero: '))\nexcept Valuerror:\n   print('o que voc√™ digitou, n√£o √© um n√∫mero inteiro')")
    c = input("\ndigite qualquer coisa para continuar: ")
    limpa()
    print("existe ainda o comando finally, que √© digitado no final do bloco Try/except que ele sempre √© executado, independente do erro.")
    c = input("\ndigite qualquer coisa para continuar: ")
    limpa()
    print("Tipos erros para serem utilizados:\na)ValueError: para valores inapropriados para o que queremos.\nb)TypeError: quando uma opera√ß√£o √© realizada em um tipo de dado inadequado\nc)IndexError: Ocorre quando voc√™ tenta acessar um √≠ndice que n√£o existe em uma lista, tupla ou outro tipo de sequ√™ncia.\nd)KeyError: Ocorre quando voc√™ tenta acessar uma chave que n√£o existe em um dicion√°rio.\ne)ZeroDivisionError: Ocorre quando voc√™ tenta dividir um n√∫mero por zero.\nf)FileNotFoundError: ocorre ao tentar abrir um arquivo inexistente.\ng)NameError: ocorre ao tentar acessar uma variavel n√£o criada.\nh)ImportError: quando se tenta importar uma biblioteca que n√£o existe em seu sistema.\ni)OverflowError: ao digitar um n√∫mero excecivamente grande.\n")
    c = input("\ndigite qualquer coisa para continuar: ")
    limpa()
limpa()
while True:   
    while True:
        parte = input("[1]entradas e sa√≠da\n[2]cria√ß√£o de varaiveis/tipos\n[3]testes de variaveis\n[4]operadores aritmeticos e sua ordem de preced√™ncia\n[5]bibliotecas\n[6]condi√ß√µes\n[7]repeti√ß√µes\n[8]Listas\n[9]Fun√ß√µes\n[10]tratando erros\n[11]sair\nqual parte voc√™ quer aprender agora? ")
        if parte == "1" or parte == "2" or parte == "3" or parte == "4" or parte == "5" or parte == "6" or parte == "7" or parte == "8" or parte == "9" or parte == "10" or  parte == "11":
            limpa()
            break
        limpa()
    if parte == '11':
        break
    match parte:
        case '1':
            entrada_saida()
        case '2':
            variaveis()
        case '3':
            testes_variaveis()
        case '4':
            operadores()
        case '5':
            biblioteca()
        case '6':
           condicao()
        case '7':
            repetir()
        case '8':
            listas()
        case '9':
            funcao() 
        case '10':
            erro()
    resposta = input("deseja continuar (s para sim/n para n√£o)").lower()
    while resposta != "s" and resposta != 'n' :
        limpa()
        resposta = input("deseja continuar (s para sim/n para n√£o)").lower()
    if resposta == 'n':
        limpa()
        break
    limpa()
